 Percent |	Source code & Disassembly of cc for mem_load_uops_misc_retired.llc_miss:pp (127 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000004d40 <Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.1]>:
         :          Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.1]:
         :          comp[n] = n;
         :
         :          // Process a sparse sampled subgraph first for approximating components.
         :          // Sample by processing a fixed number of neighbors for each node (see paper)
         :          for (int r = 0; r < neighbor_rounds; ++r) {
         :          #pragma omp parallel for schedule(dynamic,16384)
    0.00 :   4d40:   41 56                   push   %r14
    0.00 :   4d42:   b9 00 40 00 00          mov    $0x4000,%ecx
    0.00 :   4d47:   ba 01 00 00 00          mov    $0x1,%edx
    0.00 :   4d4c:   41 55                   push   %r13
    0.00 :   4d4e:   41 54                   push   %r12
    0.00 :   4d50:   49 89 fc                mov    %rdi,%r12
    0.00 :   4d53:   55                      push   %rbp
    0.00 :   4d54:   53                      push   %rbx
    0.00 :   4d55:   48 83 ec 10             sub    $0x10,%rsp
         :          CSRGraph<int, int, true>::num_nodes() const:
         :          bool directed() const {
         :          return directed_;
         :          }
         :
         :          int64_t num_nodes() const {
         :          return num_nodes_;
    0.00 :   4d59:   48 8b 07                mov    (%rdi),%rax
         :          Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.1]:
    0.00 :   4d5c:   4c 63 77 10             movslq 0x10(%rdi),%r14
         :          CSRGraph<int, int, true>::num_nodes() const:
         :          int64_t num_nodes() const {
    0.00 :   4d60:   31 ff                   xor    %edi,%edi
    0.00 :   4d62:   48 8d 5c 24 08          lea    0x8(%rsp),%rbx
    0.00 :   4d67:   48 89 e5                mov    %rsp,%rbp
    0.00 :   4d6a:   48 63 70 08             movslq 0x8(%rax),%rsi
    0.00 :   4d6e:   49 89 d9                mov    %rbx,%r9
    0.00 :   4d71:   49 89 e8                mov    %rbp,%r8
    0.00 :   4d74:   e8 a7 e6 ff ff          callq  3420 <GOMP_loop_nonmonotonic_dynamic_start@plt>
    0.00 :   4d79:   84 c0                   test   %al,%al
    0.00 :   4d7b:   75 22                   jne    4d9f <Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.1]+0x5f>
    0.00 :   4d7d:   e8 be e3 ff ff          callq  3140 <GOMP_loop_end_nowait@plt>
         :          Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.1]:
    0.00 :   4d82:   48 83 c4 10             add    $0x10,%rsp
    0.00 :   4d86:   5b                      pop    %rbx
    0.00 :   4d87:   5d                      pop    %rbp
    0.00 :   4d88:   41 5c                   pop    %r12
    0.00 :   4d8a:   41 5d                   pop    %r13
    0.00 :   4d8c:   41 5e                   pop    %r14
    0.00 :   4d8e:   c3                      retq
    0.00 :   4d8f:   90                      nop
    0.00 :   4d90:   48 89 de                mov    %rbx,%rsi
    0.00 :   4d93:   48 89 ef                mov    %rbp,%rdi
    0.00 :   4d96:   e8 35 e5 ff ff          callq  32d0 <GOMP_loop_nonmonotonic_dynamic_next@plt>
    0.00 :   4d9b:   84 c0                   test   %al,%al
    0.00 :   4d9d:   74 de                   je     4d7d <Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.1]+0x3d>
    0.00 :   4d9f:   48 8b 04 24             mov    (%rsp),%rax
    0.00 :   4da3:   44 8b 5c 24 08          mov    0x8(%rsp),%r11d
    0.00 :   4da8:   41 89 c5                mov    %eax,%r13d
    0.00 :   4dab:   48 98                   cltq
    0.00 :   4dad:   4c 8d 14 c5 08 00 00    lea    0x8(,%rax,8),%r10
    0.00 :   4db4:   00
    0.00 :   4db5:   0f 1f 00                nopl   (%rax)
         :          CSRGraph<int, int, true>::out_neigh(int, unsigned long) const:
         :          static_assert(MakeInverse, "Graph inversion disabled but reading inverse");
         :          return in_index_[v+1] - in_index_[v];
         :          }
         :
         :          Neighborhood out_neigh(NodeID_ n, OffsetT start_offset = 0) const {
         :          return Neighborhood(n, out_index_, start_offset);
    0.00 :   4db8:   49 8b 04 24             mov    (%r12),%rax
    0.00 :   4dbc:   48 8b 40 18             mov    0x18(%rax),%rax
         :          CSRGraph<int, int, true>::Neighborhood::end():
         :          iterator end()   { return g_index_[n_+1]; }
    0.79 :   4dc0:   4a 8b 14 10             mov    (%rax,%r10,1),%rdx
         :          CSRGraph<int, int, true>::Neighborhood::begin():
         :          iterator begin() { return g_index_[n_] + start_offset_; }
    0.00 :   4dc4:   4a 8b 4c 10 f8          mov    -0x8(%rax,%r10,1),%rcx
         :          CSRGraph<int, int, true>::Neighborhood::Neighborhood(int, int**, unsigned long):
         :          OffsetT max_offset = end() - begin();
    0.00 :   4dc9:   48 89 d0                mov    %rdx,%rax
    0.00 :   4dcc:   48 29 c8                sub    %rcx,%rax
    0.00 :   4dcf:   48 c1 f8 02             sar    $0x2,%rax
         :          CSRGraph<int, int, true>::Neighborhood::begin():
         :          iterator begin() { return g_index_[n_] + start_offset_; }
    0.00 :   4dd3:   4c 39 f0                cmp    %r14,%rax
    0.00 :   4dd6:   49 0f 47 c6             cmova  %r14,%rax
    0.00 :   4dda:   48 8d 04 81             lea    (%rcx,%rax,4),%rax
         :          Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.1]:
         :          for (NodeID u = 0; u < g.num_nodes(); u++) {
         :          for (NodeID v : g.out_neigh(u, r)) {
    0.00 :   4dde:   48 39 d0                cmp    %rdx,%rax
    0.00 :   4de1:   74 0f                   je     4df2 <Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.1]+0xb2>
         :          // Link at most one time if neighbor available at offset r
         :          Link(u, v, comp);
    0.00 :   4de3:   49 8b 54 24 08          mov    0x8(%r12),%rdx
   99.21 :   4de8:   8b 30                   mov    (%rax),%esi
    0.00 :   4dea:   44 89 ef                mov    %r13d,%edi
    0.00 :   4ded:   e8 ee fe ff ff          callq  4ce0 <Link(int, int, pvector<int>&)>
         :          break;
    0.00 :   4df2:   41 83 c5 01             add    $0x1,%r13d
    0.00 :   4df6:   49 83 c2 08             add    $0x8,%r10
    0.00 :   4dfa:   45 39 eb                cmp    %r13d,%r11d
    0.00 :   4dfd:   7f b9                   jg     4db8 <Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.1]+0x78>
    0.00 :   4dff:   eb 8f                   jmp    4d90 <Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.1]+0x50>
 Percent |	Source code & Disassembly of cc for mem_load_uops_misc_retired.llc_miss:pp (45 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000004ce0 <Link(int, int, pvector<int>&)>:
         :          Link(int, int, pvector<int>&):
         :
         :          using namespace std;
         :
         :
         :          // Place nodes u and v in same component of lower component ID
         :          void Link(NodeID u, NodeID v, pvector<NodeID>& comp) {
    0.00 :   4ce0:   4c 63 c7                movslq %edi,%r8
         :          pvector<int>::operator[](unsigned long):
         :          reserve(num_elements);
         :          end_size_ = start_ + num_elements;
         :          }
         :
         :          T_& operator[](size_t n) {
         :          return start_[n];
    0.00 :   4ce3:   48 8b 3a                mov    (%rdx),%rdi
         :          Link(int, int, pvector<int>&):
         :          NodeID p1 = comp[u];
         :          NodeID p2 = comp[v];
    0.00 :   4ce6:   48 63 f6                movslq %esi,%rsi
         :          void Link(NodeID u, NodeID v, pvector<NodeID>& comp) {
    0.00 :   4ce9:   49 89 d1                mov    %rdx,%r9
         :          NodeID p1 = comp[u];
    0.00 :   4cec:   42 8b 0c 87             mov    (%rdi,%r8,4),%ecx
         :          NodeID p2 = comp[v];
   91.11 :   4cf0:   8b 04 b7                mov    (%rdi,%rsi,4),%eax
         :          while (p1 != p2) {
    0.00 :   4cf3:   39 c1                   cmp    %eax,%ecx
    0.00 :   4cf5:   74 2b                   je     4d22 <Link(int, int, pvector<int>&)+0x42>
         :          NodeID high = p1 > p2 ? p1 : p2;
    0.00 :   4cf7:   39 c8                   cmp    %ecx,%eax
    0.00 :   4cf9:   89 ce                   mov    %ecx,%esi
    0.00 :   4cfb:   0f 4d f0                cmovge %eax,%esi
         :          NodeID low = p1 + (p2 - high);
    0.00 :   4cfe:   29 f0                   sub    %esi,%eax
         :          NodeID p_high = comp[high];
    0.00 :   4d00:   4c 63 c6                movslq %esi,%r8
         :          NodeID low = p1 + (p2 - high);
    0.00 :   4d03:   8d 14 08                lea    (%rax,%rcx,1),%edx
         :          pvector<int>::operator[](unsigned long):
    0.00 :   4d06:   4a 8d 0c 87             lea    (%rdi,%r8,4),%rcx
         :          Link(int, int, pvector<int>&):
         :          NodeID p_high = comp[high];
    8.89 :   4d0a:   48 63 01                movslq (%rcx),%rax
         :          // Was already 'low' or succeeded in writing 'low'
         :          if ((p_high == low) ||
    0.00 :   4d0d:   39 c2                   cmp    %eax,%edx
    0.00 :   4d0f:   74 11                   je     4d22 <Link(int, int, pvector<int>&)+0x42>
    0.00 :   4d11:   39 c6                   cmp    %eax,%esi
    0.00 :   4d13:   74 13                   je     4d28 <Link(int, int, pvector<int>&)+0x48>
         :          (p_high == high && compare_and_swap(comp[high], high, low)))
         :          break;
         :          p1 = comp[comp[high]];
         :          p2 = comp[low];
    0.00 :   4d15:   48 63 d2                movslq %edx,%rdx
         :          p1 = comp[comp[high]];
    0.00 :   4d18:   8b 0c 87                mov    (%rdi,%rax,4),%ecx
         :          p2 = comp[low];
    0.00 :   4d1b:   8b 04 97                mov    (%rdi,%rdx,4),%eax
         :          while (p1 != p2) {
    0.00 :   4d1e:   39 c1                   cmp    %eax,%ecx
    0.00 :   4d20:   75 d5                   jne    4cf7 <Link(int, int, pvector<int>&)+0x17>
         :          }
         :          }
    0.00 :   4d22:   c3                      retq
    0.00 :   4d23:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
         :          bool compare_and_swap<int>(int&, int const&, int const&):
         :          return __sync_fetch_and_add(&x, inc);
         :          }
         :
         :          template<typename T>
         :          bool compare_and_swap(T &x, const T &old_val, const T &new_val) {
         :          return __sync_bool_compare_and_swap(&x, old_val, new_val);
    0.00 :   4d28:   f0 0f b1 11             lock cmpxchg %edx,(%rcx)
         :          Link(int, int, pvector<int>&):
         :          (p_high == high && compare_and_swap(comp[high], high, low)))
    0.00 :   4d2c:   74 f4                   je     4d22 <Link(int, int, pvector<int>&)+0x42>
         :          pvector<int>::operator[](unsigned long):
    0.00 :   4d2e:   49 8b 39                mov    (%r9),%rdi
         :          Link(int, int, pvector<int>&):
         :          p1 = comp[comp[high]];
    0.00 :   4d31:   4a 63 04 87             movslq (%rdi,%r8,4),%rax
    0.00 :   4d35:   eb de                   jmp    4d15 <Link(int, int, pvector<int>&)+0x35>
 Percent |	Source code & Disassembly of cc for mem_load_uops_misc_retired.llc_miss:pp (2 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000004e10 <Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.2]>:
         :          Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.2]:
         :          // compression, this value represents the largest intermediate component
         :          NodeID c = SampleFrequentElement(comp);
         :
         :          // Final 'link' phase over remaining edges (excluding largest component)
         :          if (!g.directed()) {
         :          #pragma omp parallel for schedule(dynamic, 16384)
    0.00 :   4e10:   41 57                   push   %r15
    0.00 :   4e12:   b9 00 40 00 00          mov    $0x4000,%ecx
    0.00 :   4e17:   ba 01 00 00 00          mov    $0x1,%edx
    0.00 :   4e1c:   41 56                   push   %r14
    0.00 :   4e1e:   41 55                   push   %r13
    0.00 :   4e20:   41 54                   push   %r12
    0.00 :   4e22:   55                      push   %rbp
    0.00 :   4e23:   53                      push   %rbx
    0.00 :   4e24:   48 89 fb                mov    %rdi,%rbx
    0.00 :   4e27:   48 83 ec 28             sub    $0x28,%rsp
         :          CSRGraph<int, int, true>::num_nodes() const:
         :          bool directed() const {
         :          return directed_;
         :          }
         :
         :          int64_t num_nodes() const {
         :          return num_nodes_;
    0.00 :   4e2b:   48 8b 07                mov    (%rdi),%rax
         :          Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.2]:
    0.00 :   4e2e:   8b 6f 14                mov    0x14(%rdi),%ebp
    0.00 :   4e31:   4c 63 67 10             movslq 0x10(%rdi),%r12
         :          CSRGraph<int, int, true>::num_nodes() const:
         :          int64_t num_nodes() const {
    0.00 :   4e35:   4c 8d 4c 24 18          lea    0x18(%rsp),%r9
    0.00 :   4e3a:   4c 8d 44 24 10          lea    0x10(%rsp),%r8
    0.00 :   4e3f:   31 ff                   xor    %edi,%edi
    0.00 :   4e41:   48 63 70 08             movslq 0x8(%rax),%rsi
    0.00 :   4e45:   4c 89 4c 24 08          mov    %r9,0x8(%rsp)
    0.00 :   4e4a:   4c 89 04 24             mov    %r8,(%rsp)
    0.00 :   4e4e:   e8 cd e5 ff ff          callq  3420 <GOMP_loop_nonmonotonic_dynamic_start@plt>
    0.00 :   4e53:   84 c0                   test   %al,%al
    0.00 :   4e55:   75 2b                   jne    4e82 <Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.2]+0x72>
    0.00 :   4e57:   e8 e4 e2 ff ff          callq  3140 <GOMP_loop_end_nowait@plt>
         :          Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.2]:
    0.00 :   4e5c:   48 83 c4 28             add    $0x28,%rsp
    0.00 :   4e60:   5b                      pop    %rbx
    0.00 :   4e61:   5d                      pop    %rbp
    0.00 :   4e62:   41 5c                   pop    %r12
    0.00 :   4e64:   41 5d                   pop    %r13
    0.00 :   4e66:   41 5e                   pop    %r14
    0.00 :   4e68:   41 5f                   pop    %r15
    0.00 :   4e6a:   c3                      retq
    0.00 :   4e6b:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :   4e70:   48 8b 74 24 08          mov    0x8(%rsp),%rsi
    0.00 :   4e75:   48 8b 3c 24             mov    (%rsp),%rdi
    0.00 :   4e79:   e8 52 e4 ff ff          callq  32d0 <GOMP_loop_nonmonotonic_dynamic_next@plt>
    0.00 :   4e7e:   84 c0                   test   %al,%al
    0.00 :   4e80:   74 d5                   je     4e57 <Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.2]+0x47>
    0.00 :   4e82:   4c 8b 5c 24 10          mov    0x10(%rsp),%r11
    0.00 :   4e87:   44 8b 7c 24 18          mov    0x18(%rsp),%r15d
    0.00 :   4e8c:   45 89 dd                mov    %r11d,%r13d
    0.00 :   4e8f:   4d 63 db                movslq %r11d,%r11
    0.00 :   4e92:   49 c1 e3 02             shl    $0x2,%r11
    0.00 :   4e96:   eb 15                   jmp    4ead <Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.2]+0x9d>
    0.00 :   4e98:   0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)
    0.00 :   4e9f:   00
    0.00 :   4ea0:   41 83 c5 01             add    $0x1,%r13d
    0.00 :   4ea4:   49 83 c3 04             add    $0x4,%r11
    0.00 :   4ea8:   45 39 ef                cmp    %r13d,%r15d
    0.00 :   4eab:   7e c3                   jle    4e70 <Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.2]+0x60>
         :          for (NodeID u = 0; u < g.num_nodes(); u++) {
         :          // Skip processing nodes in the largest component
         :          if (comp[u] == c)
    0.00 :   4ead:   48 8b 53 08             mov    0x8(%rbx),%rdx
    0.00 :   4eb1:   48 8b 02                mov    (%rdx),%rax
   50.00 :   4eb4:   42 3b 2c 18             cmp    (%rax,%r11,1),%ebp
    0.00 :   4eb8:   74 e6                   je     4ea0 <Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.2]+0x90>
         :          CSRGraph<int, int, true>::out_neigh(int, unsigned long) const:
         :          static_assert(MakeInverse, "Graph inversion disabled but reading inverse");
         :          return in_index_[v+1] - in_index_[v];
         :          }
         :
         :          Neighborhood out_neigh(NodeID_ n, OffsetT start_offset = 0) const {
         :          return Neighborhood(n, out_index_, start_offset);
    0.00 :   4eba:   48 8b 03                mov    (%rbx),%rax
    0.00 :   4ebd:   48 8b 40 18             mov    0x18(%rax),%rax
         :          CSRGraph<int, int, true>::Neighborhood::end():
         :          iterator end()   { return g_index_[n_+1]; }
   50.00 :   4ec1:   4e 8b 54 58 08          mov    0x8(%rax,%r11,2),%r10
         :          CSRGraph<int, int, true>::Neighborhood::begin():
         :          iterator begin() { return g_index_[n_] + start_offset_; }
    0.00 :   4ec6:   4a 8b 34 58             mov    (%rax,%r11,2),%rsi
         :          CSRGraph<int, int, true>::Neighborhood::Neighborhood(int, int**, unsigned long):
         :          OffsetT max_offset = end() - begin();
    0.00 :   4eca:   4c 89 d0                mov    %r10,%rax
    0.00 :   4ecd:   48 29 f0                sub    %rsi,%rax
    0.00 :   4ed0:   48 c1 f8 02             sar    $0x2,%rax
         :          CSRGraph<int, int, true>::Neighborhood::begin():
         :          iterator begin() { return g_index_[n_] + start_offset_; }
    0.00 :   4ed4:   4c 39 e0                cmp    %r12,%rax
    0.00 :   4ed7:   49 0f 47 c4             cmova  %r12,%rax
    0.00 :   4edb:   48 8d 04 86             lea    (%rsi,%rax,4),%rax
         :          Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.2]:
         :          continue;
         :          // Skip over part of neighborhood (determined by neighbor_rounds)
         :          for (NodeID v : g.out_neigh(u, neighbor_rounds)) {
    0.00 :   4edf:   4c 39 d0                cmp    %r10,%rax
    0.00 :   4ee2:   74 bc                   je     4ea0 <Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.2]+0x90>
    0.00 :   4ee4:   49 89 c6                mov    %rax,%r14
    0.00 :   4ee7:   eb 0b                   jmp    4ef4 <Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.2]+0xe4>
    0.00 :   4ee9:   0f 1f 80 00 00 00 00    nopl   0x0(%rax)
         :          Link(u, v, comp);
    0.00 :   4ef0:   48 8b 53 08             mov    0x8(%rbx),%rdx
    0.00 :   4ef4:   41 8b 36                mov    (%r14),%esi
    0.00 :   4ef7:   44 89 ef                mov    %r13d,%edi
         :          for (NodeID v : g.out_neigh(u, neighbor_rounds)) {
    0.00 :   4efa:   49 83 c6 04             add    $0x4,%r14
         :          Link(u, v, comp);
    0.00 :   4efe:   e8 dd fd ff ff          callq  4ce0 <Link(int, int, pvector<int>&)>
         :          for (NodeID v : g.out_neigh(u, neighbor_rounds)) {
    0.00 :   4f03:   4d 39 f2                cmp    %r14,%r10
    0.00 :   4f06:   75 e8                   jne    4ef0 <Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.2]+0xe0>
    0.00 :   4f08:   eb 96                   jmp    4ea0 <Afforest(CSRGraph<int, int, true> const&, int) [clone ._omp_fn.2]+0x90>
 Percent |	Source code & Disassembly of kcore for mem_load_uops_misc_retired.llc_miss:pp (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :                      Disassembly of section load0:
         :
         :                      ffffffff88e7cf20 <load0>:
    0.00 :   ffffffff88e7cf20:       41 57                   push   %r15
    0.00 :   ffffffff88e7cf22:       41 56                   push   %r14
    0.00 :   ffffffff88e7cf24:       49 89 fe                mov    %rdi,%r14
    0.00 :   ffffffff88e7cf27:       41 55                   push   %r13
    0.00 :   ffffffff88e7cf29:       49 89 d5                mov    %rdx,%r13
    0.00 :   ffffffff88e7cf2c:       41 54                   push   %r12
    0.00 :   ffffffff88e7cf2e:       49 89 f4                mov    %rsi,%r12
    0.00 :   ffffffff88e7cf31:       55                      push   %rbp
    0.00 :   ffffffff88e7cf32:       89 cd                   mov    %ecx,%ebp
    0.00 :   ffffffff88e7cf34:       53                      push   %rbx
    0.00 :   ffffffff88e7cf35:       65 48 8b 04 25 c0 fb    mov    %gs:0x1fbc0,%rax
    0.00 :   ffffffff88e7cf3c:       01 00
    0.00 :   ffffffff88e7cf3e:       48 83 ec 20             sub    $0x20,%rsp
    0.00 :   ffffffff88e7cf42:       4c 8b b8 e0 0b 00 00    mov    0xbe0(%rax),%r15
    0.00 :   ffffffff88e7cf49:       44 89 44 24 18          mov    %r8d,0x18(%rsp)
    0.00 :   ffffffff88e7cf4e:       44 89 4c 24 1c          mov    %r9d,0x1c(%rsp)
    0.00 :   ffffffff88e7cf53:       4d 85 ff                test   %r15,%r15
    0.00 :   ffffffff88e7cf56:       0f 85 d2 03 00 00       jne    0xffffffff88e7d32e
    0.00 :   ffffffff88e7cf5c:       83 7c 24 18 04          cmpl   $0x4,0x18(%rsp)
    0.00 :   ffffffff88e7cf61:       74 16                   je     0xffffffff88e7cf79
    0.00 :   ffffffff88e7cf63:       ba 01 00 00 00          mov    $0x1,%edx
    0.00 :   ffffffff88e7cf68:       89 e9                   mov    %ebp,%ecx
    0.00 :   ffffffff88e7cf6a:       31 f6                   xor    %esi,%esi
    0.00 :   ffffffff88e7cf6c:       4c 89 ef                mov    %r13,%rdi
    0.00 :   ffffffff88e7cf6f:       d3 e2                   shl    %cl,%edx
    0.00 :   ffffffff88e7cf71:       48 63 d2                movslq %edx,%rdx
    0.00 :   ffffffff88e7cf74:       e8 a7 7b fc ff          callq  0xffffffff88e44b20
    0.00 :   ffffffff88e7cf79:       41 b9 09 00 00 00       mov    $0x9,%r9d
    0.00 :   ffffffff88e7cf7f:       4d 89 f8                mov    %r15,%r8
    0.00 :   ffffffff88e7cf82:       44 89 c8                mov    %r9d,%eax
    0.00 :   ffffffff88e7cf85:       49 89 d9                mov    %rbx,%r9
    0.00 :   ffffffff88e7cf88:       89 c3                   mov    %eax,%ebx
    0.00 :   ffffffff88e7cf8a:       39 dd                   cmp    %ebx,%ebp
    0.00 :   ffffffff88e7cf8c:       0f 82 43 01 00 00       jb     0xffffffff88e7d0d5
    0.00 :   ffffffff88e7cf92:       83 fd 09                cmp    $0x9,%ebp
    0.00 :   ffffffff88e7cf95:       0f 85 4d 01 00 00       jne    0xffffffff88e7d0e8
    0.00 :   ffffffff88e7cf9b:       49 83 bd 90 00 00 00    cmpq   $0x0,0x90(%r13)
    0.00 :   ffffffff88e7cfa2:       00
    0.00 :   ffffffff88e7cfa3:       41 bf 00 02 00 00       mov    $0x200,%r15d
    0.00 :   ffffffff88e7cfa9:       41 ba 09 00 00 00       mov    $0x9,%r10d
    0.00 :   ffffffff88e7cfaf:       bb 0a 00 00 00          mov    $0xa,%ebx
    0.00 :   ffffffff88e7cfb4:       0f 85 04 02 00 00       jne    0xffffffff88e7d1be
    0.00 :   ffffffff88e7cfba:       4d 85 c0                test   %r8,%r8
    0.00 :   ffffffff88e7cfbd:       74 41                   je     0xffffffff88e7d000
    0.00 :   ffffffff88e7cfbf:       49 8b 00                mov    (%r8),%rax
    0.00 :   ffffffff88e7cfc2:       44 39 50 60             cmp    %r10d,0x60(%rax)
    0.00 :   ffffffff88e7cfc6:       75 38                   jne    0xffffffff88e7d000
    0.00 :   ffffffff88e7cfc8:       8b 44 24 18             mov    0x18(%rsp),%eax
    0.00 :   ffffffff88e7cfcc:       83 f8 04                cmp    $0x4,%eax
    0.00 :   ffffffff88e7cfcf:       74 2f                   je     0xffffffff88e7d000
    0.00 :   ffffffff88e7cfd1:       41 83 fa 08             cmp    $0x8,%r10d
    0.00 :   ffffffff88e7cfd5:       7f 05                   jg     0xffffffff88e7cfdc
    0.00 :   ffffffff88e7cfd7:       83 f8 01                cmp    $0x1,%eax
    0.00 :   ffffffff88e7cfda:       74 24                   je     0xffffffff88e7d000
    0.00 :   ffffffff88e7cfdc:       4d 89 70 08             mov    %r14,0x8(%r8)
    0.00 :   ffffffff88e7cfe0:       44 89 f9                mov    %r15d,%ecx
    0.00 :   ffffffff88e7cfe3:       48 83 c4 20             add    $0x20,%rsp
    0.00 :   ffffffff88e7cfe7:       4c 89 ef                mov    %r13,%rdi
    0.00 :   ffffffff88e7cfea:       f7 d9                   neg    %ecx
    0.00 :   ffffffff88e7cfec:       5b                      pop    %rbx
    0.00 :   ffffffff88e7cfed:       31 f6                   xor    %esi,%esi
    0.00 :   ffffffff88e7cfef:       5d                      pop    %rbp
    0.00 :   ffffffff88e7cff0:       48 63 d1                movslq %ecx,%rdx
    0.00 :   ffffffff88e7cff3:       41 5c                   pop    %r12
    0.00 :   ffffffff88e7cff5:       41 5d                   pop    %r13
    0.00 :   ffffffff88e7cff7:       41 5e                   pop    %r14
    0.00 :   ffffffff88e7cff9:       41 5f                   pop    %r15
    0.00 :   ffffffff88e7cffb:       e9 20 7b fc ff          jmpq   0xffffffff88e44b20
    0.00 :   ffffffff88e7d000:       4d 63 cf                movslq %r15d,%r9
    0.00 :   ffffffff88e7d003:       4d 31 e1                xor    %r12,%r9
    0.00 :   ffffffff88e7d006:       4c 89 c8                mov    %r9,%rax
    0.00 :   ffffffff88e7d009:       4c 29 e0                sub    %r12,%rax
    0.00 :   ffffffff88e7d00c:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :   ffffffff88e7d010:       4d 8d 3c 06             lea    (%r14,%rax,1),%r15
    0.00 :   ffffffff88e7d014:       41 8b 47 30             mov    0x30(%r15),%eax
    0.00 :   ffffffff88e7d018:       25 80 00 00 f0          and    $0xf0000080,%eax
    0.00 :   ffffffff88e7d01d:       3d 00 00 00 f0          cmp    $0xf0000000,%eax
    0.00 :   ffffffff88e7d022:       0f 85 c0 00 00 00       jne    0xffffffff88e7d0e8
    0.00 :   ffffffff88e7d028:       41 3b 6f 28             cmp    0x28(%r15),%ebp
    0.00 :   ffffffff88e7d02c:       0f 85 b6 00 00 00       jne    0xffffffff88e7d0e8
    0.00 :   ffffffff88e7d032:       49 8b 16                mov    (%r14),%rdx
    0.00 :   ffffffff88e7d035:       49 8b 07                mov    (%r15),%rax
    0.00 :   ffffffff88e7d038:       48 c1 ea 33             shr    $0x33,%rdx
    0.00 :   ffffffff88e7d03c:       48 c1 e8 33             shr    $0x33,%rax
    0.00 :   ffffffff88e7d040:       39 c2                   cmp    %eax,%edx
    0.00 :   ffffffff88e7d042:       0f 85 a0 00 00 00       jne    0xffffffff88e7d0e8
    0.00 :   ffffffff88e7d048:       66 66 66 66 90          data16 data16 data16 xchg %ax,%ax
    0.00 :   ffffffff88e7d04d:       49 8d 7f 08             lea    0x8(%r15),%rdi
    0.00 :   ffffffff88e7d051:       4c 89 44 24 08          mov    %r8,0x8(%rsp)
    0.00 :   ffffffff88e7d056:       4c 89 0c 24             mov    %r9,(%rsp)
    0.00 :   ffffffff88e7d05a:       e8 61 34 21 00          callq  0xffffffff890904c0
    0.00 :   ffffffff88e7d05f:       4c 8b 0c 24             mov    (%rsp),%r9
    0.00 :   ffffffff88e7d063:       4c 8b 44 24 08          mov    0x8(%rsp),%r8
    0.00 :   ffffffff88e7d068:       84 c0                   test   %al,%al
    0.00 :   ffffffff88e7d06a:       74 0f                   je     0xffffffff88e7d07b
    0.00 :   ffffffff88e7d06c:       49 8b 57 08             mov    0x8(%r15),%rdx
    0.00 :   ffffffff88e7d070:       49 8b 47 10             mov    0x10(%r15),%rax
    0.00 :   ffffffff88e7d074:       48 89 42 08             mov    %rax,0x8(%rdx)
    0.00 :   ffffffff88e7d078:       48 89 10                mov    %rdx,(%rax)
    0.00 :   ffffffff88e7d07b:       48 b8 00 01 00 00 00    movabs $0xdead000000000100,%rax
    0.00 :   ffffffff88e7d082:       00 ad de
    0.00 :   ffffffff88e7d085:       41 81 4f 30 80 00 00    orl    $0x80,0x30(%r15)
    0.00 :   ffffffff88e7d08c:       00
    0.00 :   ffffffff88e7d08d:       49 89 47 08             mov    %rax,0x8(%r15)
    0.00 :   ffffffff88e7d091:       48 83 c0 22             add    $0x22,%rax
    0.00 :   ffffffff88e7d095:       49 89 47 10             mov    %rax,0x10(%r15)
    0.00 :   ffffffff88e7d099:       89 e8                   mov    %ebp,%eax
    0.00 :   ffffffff88e7d09b:       83 c5 01                add    $0x1,%ebp
    0.00 :   ffffffff88e7d09e:       48 8d 14 80             lea    (%rax,%rax,4),%rdx
    0.00 :   ffffffff88e7d0a2:       49 c7 47 28 00 00 00    movq   $0x0,0x28(%r15)
    0.00 :   ffffffff88e7d0a9:       00
    0.00 :   ffffffff88e7d0aa:       48 8d 04 50             lea    (%rax,%rdx,2),%rax
    0.00 :   ffffffff88e7d0ae:       4c 89 e2                mov    %r12,%rdx
    0.00 :   ffffffff88e7d0b1:       49 83 ac c5 10 01 00    subq   $0x1,0x110(%r13,%rax,8)
    0.00 :   ffffffff88e7d0b8:       00 01
    0.00 :   ffffffff88e7d0ba:       4c 21 ca                and    %r9,%rdx
    0.00 :   ffffffff88e7d0bd:       48 89 d0                mov    %rdx,%rax
    0.00 :   ffffffff88e7d0c0:       4c 29 e0                sub    %r12,%rax
    0.00 :   ffffffff88e7d0c3:       49 89 d4                mov    %rdx,%r12
    0.00 :   ffffffff88e7d0c6:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :   ffffffff88e7d0ca:       49 01 c6                add    %rax,%r14
    0.00 :   ffffffff88e7d0cd:       39 dd                   cmp    %ebx,%ebp
    0.00 :   ffffffff88e7d0cf:       0f 83 bd fe ff ff       jae    0xffffffff88e7cf92
    0.00 :   ffffffff88e7d0d5:       41 bf 01 00 00 00       mov    $0x1,%r15d
    0.00 :   ffffffff88e7d0db:       89 e9                   mov    %ebp,%ecx
    0.00 :   ffffffff88e7d0dd:       41 89 ea                mov    %ebp,%r10d
    0.00 :   ffffffff88e7d0e0:       41 d3 e7                shl    %cl,%r15d
    0.00 :   ffffffff88e7d0e3:       e9 d2 fe ff ff          jmpq   0xffffffff88e7cfba
    0.00 :   ffffffff88e7d0e8:       41 89 ef                mov    %ebp,%r15d
    0.00 :   ffffffff88e7d0eb:       4c 89 cb                mov    %r9,%rbx
    0.00 :   ffffffff88e7d0ee:       4b 8d 14 bf             lea    (%r15,%r15,4),%rdx
    0.00 :   ffffffff88e7d0f2:       4c 89 f8                mov    %r15,%rax
    0.00 :   ffffffff88e7d0f5:       49 8d 14 57             lea    (%r15,%rdx,2),%rdx
    0.00 :   ffffffff88e7d0f9:       48 c1 e2 03             shl    $0x3,%rdx
    0.00 :   ffffffff88e7d0fd:       41 81 66 30 7f ff ff    andl   $0xffffff7f,0x30(%r14)
    0.00 :   ffffffff88e7d104:       ff
    0.00 :   ffffffff88e7d105:       49 89 46 28             mov    %rax,0x28(%r14)
    0.00 :   ffffffff88e7d109:       f6 44 24 1c 02          testb  $0x2,0x1c(%rsp)
    0.00 :   ffffffff88e7d10e:       0f 84 26 01 00 00       je     0xffffffff88e7d23a
    0.00 :   ffffffff88e7d114:       48 63 44 24 18          movslq 0x18(%rsp),%rax
    0.00 :   ffffffff88e7d119:       49 8d 4e 08             lea    0x8(%r14),%rcx
    0.00 :   ffffffff88e7d11d:       48 89 cf                mov    %rcx,%rdi
    0.00 :   ffffffff88e7d120:       48 89 0c 24             mov    %rcx,(%rsp)
    0.00 :   ffffffff88e7d124:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :   ffffffff88e7d128:       48 89 c6                mov    %rax,%rsi
    0.00 :   ffffffff88e7d12b:       48 8d 9c 02 c0 00 00    lea    0xc0(%rdx,%rax,1),%rbx
    0.00 :   ffffffff88e7d132:       00
    0.00 :   ffffffff88e7d133:       4b 8d 04 bf             lea    (%r15,%r15,4),%rax
    0.00 :   ffffffff88e7d137:       49 8d 04 47             lea    (%r15,%rax,2),%rax
    0.00 :   ffffffff88e7d13b:       4c 01 eb                add    %r13,%rbx
    0.00 :   ffffffff88e7d13e:       4c 8d 24 c6             lea    (%rsi,%rax,8),%r12
    0.00 :   ffffffff88e7d142:       48 89 da                mov    %rbx,%rdx
    0.00 :   ffffffff88e7d145:       4d 01 ec                add    %r13,%r12
    0.00 :   ffffffff88e7d148:       49 8b b4 24 c8 00 00    mov    0xc8(%r12),%rsi
    0.00 :   ffffffff88e7d14f:       00
    0.00 :   ffffffff88e7d150:       48 89 74 24 08          mov    %rsi,0x8(%rsp)
    0.00 :   ffffffff88e7d155:       e8 16 33 21 00          callq  0xffffffff89090470
    0.00 :   ffffffff88e7d15a:       48 8b 0c 24             mov    (%rsp),%rcx
    0.00 :   ffffffff88e7d15e:       48 8b 74 24 08          mov    0x8(%rsp),%rsi
    0.00 :   ffffffff88e7d163:       84 c0                   test   %al,%al
    0.00 :   ffffffff88e7d165:       74 13                   je     0xffffffff88e7d17a
    0.00 :   ffffffff88e7d167:       49 89 8c 24 c8 00 00    mov    %rcx,0xc8(%r12)
    0.00 :   ffffffff88e7d16e:       00
    0.00 :   ffffffff88e7d16f:       49 89 5e 08             mov    %rbx,0x8(%r14)
    0.00 :   ffffffff88e7d173:       49 89 76 10             mov    %rsi,0x10(%r14)
    0.00 :   ffffffff88e7d177:       48 89 0e                mov    %rcx,(%rsi)
    0.00 :   ffffffff88e7d17a:       4b 8d 04 bf             lea    (%r15,%r15,4),%rax
    0.00 :   ffffffff88e7d17e:       49 8d 04 47             lea    (%r15,%rax,2),%rax
    0.00 :   ffffffff88e7d182:       49 83 84 c5 10 01 00    addq   $0x1,0x110(%r13,%rax,8)
    0.00 :   ffffffff88e7d189:       00 01
    0.00 :   ffffffff88e7d18b:       f6 44 24 1c 01          testb  $0x1,0x1c(%rsp)
    0.00 :   ffffffff88e7d190:       0f 84 4f 01 00 00       je     0xffffffff88e7d2e5
    0.00 :   ffffffff88e7d196:       48 83 c4 20             add    $0x20,%rsp
    0.00 :   ffffffff88e7d19a:       5b                      pop    %rbx
    0.00 :   ffffffff88e7d19b:       5d                      pop    %rbp
    0.00 :   ffffffff88e7d19c:       41 5c                   pop    %r12
    0.00 :   ffffffff88e7d19e:       41 5d                   pop    %r13
    0.00 :   ffffffff88e7d1a0:       41 5e                   pop    %r14
    0.00 :   ffffffff88e7d1a2:       41 5f                   pop    %r15
    0.00 :   ffffffff88e7d1a4:       c3                      retq
    0.00 :   ffffffff88e7d1a5:       cc                      int3
    0.00 :   ffffffff88e7d1a6:       cc                      int3
    0.00 :   ffffffff88e7d1a7:       cc                      int3
    0.00 :   ffffffff88e7d1a8:       cc                      int3
    0.00 :   ffffffff88e7d1a9:       49 8b 07                mov    (%r15),%rax
    0.00 :   ffffffff88e7d1ac:       a8 04                   test   $0x4,%al
    0.00 :   ffffffff88e7d1ae:       0f 84 99 fe ff ff       je     0xffffffff88e7d04d
    0.00 :   ffffffff88e7d1b4:       49 0f ba 37 02          btrq   $0x2,(%r15)
    0.00 :   ffffffff88e7d1b9:       e9 8f fe ff ff          jmpq   0xffffffff88e7d04d
    0.00 :   ffffffff88e7d1be:       4d 89 e1                mov    %r12,%r9
    0.00 :   ffffffff88e7d1c1:       ba 07 00 00 00          mov    $0x7,%edx
    0.00 :   ffffffff88e7d1c6:       4c 89 44 24 08          mov    %r8,0x8(%rsp)
    0.00 :   ffffffff88e7d1cb:       49 81 f1 00 02 00 00    xor    $0x200,%r9
    0.00 :   ffffffff88e7d1d2:       44 89 14 24             mov    %r10d,(%rsp)
    0.00 :   ffffffff88e7d1d6:       4c 89 cf                mov    %r9,%rdi
    0.00 :   ffffffff88e7d1d9:       4c 89 4c 24 10          mov    %r9,0x10(%rsp)
    0.00 :   ffffffff88e7d1de:       4c 29 e7                sub    %r12,%rdi
    0.00 :   ffffffff88e7d1e1:       48 c1 e7 06             shl    $0x6,%rdi
    0.00 :   ffffffff88e7d1e5:       4c 01 f7                add    %r14,%rdi
    0.00 :   ffffffff88e7d1e8:       48 89 fe                mov    %rdi,%rsi
    0.00 :   ffffffff88e7d1eb:       48 2b 35 8e 89 ef 00    sub    0xef898e(%rip),%rsi        # 0xffffffff89d75b80
    0.00 :   ffffffff88e7d1f2:       48 c1 fe 06             sar    $0x6,%rsi
    0.00 :   ffffffff88e7d1f6:       e8 b5 fc ff ff          callq  0xffffffff88e7ceb0
    0.00 :   ffffffff88e7d1fb:       8b 4c 24 18             mov    0x18(%rsp),%ecx
    0.00 :   ffffffff88e7d1ff:       4c 8b 44 24 08          mov    0x8(%rsp),%r8
    0.00 :   ffffffff88e7d204:       41 ba 09 00 00 00       mov    $0x9,%r10d
    0.00 :   ffffffff88e7d20a:       39 c1                   cmp    %eax,%ecx
    0.00 :   ffffffff88e7d20c:       0f 84 a8 fd ff ff       je     0xffffffff88e7cfba
    0.00 :   ffffffff88e7d212:       83 f9 04                cmp    $0x4,%ecx
    0.00 :   ffffffff88e7d215:       4c 8b 4c 24 10          mov    0x10(%rsp),%r9
    0.00 :   ffffffff88e7d21a:       74 09                   je     0xffffffff88e7d225
    0.00 :   ffffffff88e7d21c:       83 f8 04                cmp    $0x4,%eax
    0.00 :   ffffffff88e7d21f:       0f 85 95 fd ff ff       jne    0xffffffff88e7cfba
    0.00 :   ffffffff88e7d225:       4c 89 cb                mov    %r9,%rbx
    0.00 :   ffffffff88e7d228:       ba 18 03 00 00          mov    $0x318,%edx
    0.00 :   ffffffff88e7d22d:       b8 09 00 00 00          mov    $0x9,%eax
    0.00 :   ffffffff88e7d232:       41 89 ef                mov    %ebp,%r15d
    0.00 :   ffffffff88e7d235:       e9 c3 fe ff ff          jmpq   0xffffffff88e7d0fd
    0.00 :   ffffffff88e7d23a:       66 66 66 66 90          data16 data16 data16 xchg %ax,%ax
    0.00 :   ffffffff88e7d23f:       83 fd 08                cmp    $0x8,%ebp
    0.00 :   ffffffff88e7d242:       77 43                   ja     0xffffffff88e7d287
    0.00 :   ffffffff88e7d244:       8d 4d 01                lea    0x1(%rbp),%ecx
    0.00 :   ffffffff88e7d247:       b8 01 00 00 00          mov    $0x1,%eax
    0.00 :   ffffffff88e7d24c:       4c 21 e3                and    %r12,%rbx
    0.00 :   ffffffff88e7d24f:       d3 e0                   shl    %cl,%eax
    0.00 :   ffffffff88e7d251:       48 89 de                mov    %rbx,%rsi
    0.00 :   ffffffff88e7d254:       48 98                   cltq
    0.00 :   ffffffff88e7d256:       4c 29 e6                sub    %r12,%rsi
    0.00 :   ffffffff88e7d259:       48 31 d8                xor    %rbx,%rax
    0.00 :   ffffffff88e7d25c:       48 c1 e6 06             shl    $0x6,%rsi
    0.00 :   ffffffff88e7d260:       48 29 d8                sub    %rbx,%rax
    0.00 :   ffffffff88e7d263:       4c 01 f6                add    %r14,%rsi
    0.00 :   ffffffff88e7d266:       48 c1 e0 06             shl    $0x6,%rax
    0.00 :   ffffffff88e7d26a:       48 01 f0                add    %rsi,%rax
  100.00 :   ffffffff88e7d26d:       8b 78 30                mov    0x30(%rax),%edi
    0.00 :   ffffffff88e7d270:       81 e7 80 00 00 f0       and    $0xf0000080,%edi
    0.00 :   ffffffff88e7d276:       81 ff 00 00 00 f0       cmp    $0xf0000000,%edi
    0.00 :   ffffffff88e7d27c:       75 09                   jne    0xffffffff88e7d287
    0.00 :   ffffffff88e7d27e:       3b 48 28                cmp    0x28(%rax),%ecx
    0.00 :   ffffffff88e7d281:       0f 84 ce 00 00 00       je     0xffffffff88e7d355
    0.00 :   ffffffff88e7d287:       48 63 44 24 18          movslq 0x18(%rsp),%rax
    0.00 :   ffffffff88e7d28c:       4d 8d 66 08             lea    0x8(%r14),%r12
    0.00 :   ffffffff88e7d290:       4c 89 e7                mov    %r12,%rdi
    0.00 :   ffffffff88e7d293:       48 c1 e0 04             shl    $0x4,%rax
    0.00 :   ffffffff88e7d297:       48 8d 9c 02 c0 00 00    lea    0xc0(%rdx,%rax,1),%rbx
    0.00 :   ffffffff88e7d29e:       00
    0.00 :   ffffffff88e7d29f:       48 89 c1                mov    %rax,%rcx
    0.00 :   ffffffff88e7d2a2:       4b 8d 04 bf             lea    (%r15,%r15,4),%rax
    0.00 :   ffffffff88e7d2a6:       49 8d 04 47             lea    (%r15,%rax,2),%rax
    0.00 :   ffffffff88e7d2aa:       4c 01 eb                add    %r13,%rbx
    0.00 :   ffffffff88e7d2ad:       48 8d 04 c1             lea    (%rcx,%rax,8),%rax
    0.00 :   ffffffff88e7d2b1:       48 89 de                mov    %rbx,%rsi
    0.00 :   ffffffff88e7d2b4:       49 8b 94 05 c0 00 00    mov    0xc0(%r13,%rax,1),%rdx
    0.00 :   ffffffff88e7d2bb:       00
    0.00 :   ffffffff88e7d2bc:       48 89 14 24             mov    %rdx,(%rsp)
    0.00 :   ffffffff88e7d2c0:       e8 ab 31 21 00          callq  0xffffffff89090470
    0.00 :   ffffffff88e7d2c5:       84 c0                   test   %al,%al
    0.00 :   ffffffff88e7d2c7:       0f 84 ad fe ff ff       je     0xffffffff88e7d17a
    0.00 :   ffffffff88e7d2cd:       48 8b 14 24             mov    (%rsp),%rdx
    0.00 :   ffffffff88e7d2d1:       4c 89 62 08             mov    %r12,0x8(%rdx)
    0.00 :   ffffffff88e7d2d5:       49 89 56 08             mov    %rdx,0x8(%r14)
    0.00 :   ffffffff88e7d2d9:       49 89 5e 10             mov    %rbx,0x10(%r14)
    0.00 :   ffffffff88e7d2dd:       4c 89 23                mov    %r12,(%rbx)
    0.00 :   ffffffff88e7d2e0:       e9 95 fe ff ff          jmpq   0xffffffff88e7d17a
    0.00 :   ffffffff88e7d2e5:       66 66 66 66 90          data16 data16 data16 xchg %ax,%ax
    0.00 :   ffffffff88e7d2ea:       e9 a7 fe ff ff          jmpq   0xffffffff88e7d196
    0.00 :   ffffffff88e7d2ef:       83 fd 09                cmp    $0x9,%ebp
    0.00 :   ffffffff88e7d2f2:       0f 8e 47 ff ff ff       jle    0xffffffff88e7d23f
    0.00 :   ffffffff88e7d2f8:       48 89 14 24             mov    %rdx,(%rsp)
    0.00 :   ffffffff88e7d2fc:       e8 1f 62 00 00          callq  0xffffffff88e83520
    0.00 :   ffffffff88e7d301:       48 8b 14 24             mov    (%rsp),%rdx
    0.00 :   ffffffff88e7d305:       84 c0                   test   %al,%al
    0.00 :   ffffffff88e7d307:       0f 85 07 fe ff ff       jne    0xffffffff88e7d114
    0.00 :   ffffffff88e7d30d:       e9 75 ff ff ff          jmpq   0xffffffff88e7d287
    0.00 :   ffffffff88e7d312:       83 fd 08                cmp    $0x8,%ebp
    0.00 :   ffffffff88e7d315:       0f 86 7b fe ff ff       jbe    0xffffffff88e7d196
    0.00 :   ffffffff88e7d31b:       48 83 c4 20             add    $0x20,%rsp
    0.00 :   ffffffff88e7d31f:       5b                      pop    %rbx
    0.00 :   ffffffff88e7d320:       5d                      pop    %rbp
    0.00 :   ffffffff88e7d321:       41 5c                   pop    %r12
    0.00 :   ffffffff88e7d323:       41 5d                   pop    %r13
    0.00 :   ffffffff88e7d325:       41 5e                   pop    %r14
    0.00 :   ffffffff88e7d327:       41 5f                   pop    %r15
    0.00 :   ffffffff88e7d329:       e9 52 7a 05 00          jmpq   0xffffffff88ed4d80
    0.00 :   ffffffff88e7d32e:       f6 40 26 20             testb  $0x20,0x26(%rax)
    0.00 :   ffffffff88e7d332:       75 19                   jne    0xffffffff88e7d34d
    0.00 :   ffffffff88e7d334:       49 8b 47 08             mov    0x8(%r15),%rax
    0.00 :   ffffffff88e7d338:       48 85 c0                test   %rax,%rax
    0.00 :   ffffffff88e7d33b:       75 10                   jne    0xffffffff88e7d34d
    0.00 :   ffffffff88e7d33d:       49 8b 17                mov    (%r15),%rdx
    0.00 :   ffffffff88e7d340:       4c 3b 6a 40             cmp    0x40(%rdx),%r13
    0.00 :   ffffffff88e7d344:       4c 0f 45 f8             cmovne %rax,%r15
    0.00 :   ffffffff88e7d348:       e9 0f fc ff ff          jmpq   0xffffffff88e7cf5c
    0.00 :   ffffffff88e7d34d:       45 31 ff                xor    %r15d,%r15d
    0.00 :   ffffffff88e7d350:       e9 07 fc ff ff          jmpq   0xffffffff88e7cf5c
    0.00 :   ffffffff88e7d355:       48 8b 0e                mov    (%rsi),%rcx
    0.00 :   ffffffff88e7d358:       48 8b 00                mov    (%rax),%rax
    0.00 :   ffffffff88e7d35b:       48 c1 e9 33             shr    $0x33,%rcx
    0.00 :   ffffffff88e7d35f:       48 c1 e8 33             shr    $0x33,%rax
    0.00 :   ffffffff88e7d363:       39 c1                   cmp    %eax,%ecx
    0.00 :   ffffffff88e7d365:       0f 85 1c ff ff ff       jne    0xffffffff88e7d287
    0.00 :   ffffffff88e7d36b:       e9 a4 fd ff ff          jmpq   0xffffffff88e7d114
 Percent |	Source code & Disassembly of kcore for mem_load_uops_misc_retired.llc_miss:pp (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :                      Disassembly of section load0:
         :
         :                      ffffffff88cd1ae0 <load0>:
    0.00 :   ffffffff88cd1ae0:       66 66 66 66 90          data16 data16 data16 xchg %ax,%ax
    0.00 :   ffffffff88cd1ae5:       41 57                   push   %r15
    0.00 :   ffffffff88cd1ae7:       41 56                   push   %r14
    0.00 :   ffffffff88cd1ae9:       41 55                   push   %r13
    0.00 :   ffffffff88cd1aeb:       41 54                   push   %r12
    0.00 :   ffffffff88cd1aed:       55                      push   %rbp
    0.00 :   ffffffff88cd1aee:       48 8d ae 80 00 00 00    lea    0x80(%rsi),%rbp
    0.00 :   ffffffff88cd1af5:       53                      push   %rbx
    0.00 :   ffffffff88cd1af6:       48 83 ec 10             sub    $0x10,%rsp
    0.00 :   ffffffff88cd1afa:       4c 8b a7 70 09 00 00    mov    0x970(%rdi),%r12
    0.00 :   ffffffff88cd1b01:       49 8d 9c 24 80 00 00    lea    0x80(%r12),%rbx
    0.00 :   ffffffff88cd1b08:       00
    0.00 :   ffffffff88cd1b09:       48 39 eb                cmp    %rbp,%rbx
    0.00 :   ffffffff88cd1b0c:       0f 84 7c 01 00 00       je     0xffffffff88cd1c8e
    0.00 :   ffffffff88cd1b12:       49 89 fd                mov    %rdi,%r13
    0.00 :   ffffffff88cd1b15:       66 66 66 66 90          data16 data16 data16 xchg %ax,%ax
    0.00 :   ffffffff88cd1b1a:       49 8b 84 24 d0 01 00    mov    0x1d0(%r12),%rax
    0.00 :   ffffffff88cd1b21:       00
    0.00 :   ffffffff88cd1b22:       44 8b 35 d3 7d 58 01    mov    0x1587dd3(%rip),%r14d        # 0xffffffff8a2598fc
    0.00 :   ffffffff88cd1b29:       44 8b 78 10             mov    0x10(%rax),%r15d
    0.00 :   ffffffff88cd1b2d:       66 66 66 66 90          data16 data16 data16 xchg %ax,%ax
    0.00 :   ffffffff88cd1b32:       31 c9                   xor    %ecx,%ecx
    0.00 :   ffffffff88cd1b34:       49 8b 04 24             mov    (%r12),%rax
    0.00 :   ffffffff88cd1b38:       a8 08                   test   $0x8,%al
    0.00 :   ffffffff88cd1b3a:       0f 85 4e 01 00 00       jne    0xffffffff88cd1c8e
  100.00 :   ffffffff88cd1b40:       41 83 bc 24 64 03 00    cmpl   $0x5,0x364(%r12)
    0.00 :   ffffffff88cd1b47:       00 05
    0.00 :   ffffffff88cd1b49:       8b 86 64 03 00 00       mov    0x364(%rsi),%eax
    0.00 :   ffffffff88cd1b4f:       0f 84 a2 01 00 00       je     0xffffffff88cd1cf7
    0.00 :   ffffffff88cd1b55:       85 c0                   test   %eax,%eax
    0.00 :   ffffffff88cd1b57:       0f 85 31 01 00 00       jne    0xffffffff88cd1c8e
    0.00 :   ffffffff88cd1b5d:       66 66 66 66 90          data16 data16 data16 xchg %ax,%ax
    0.00 :   ffffffff88cd1b62:       41 8b 84 24 c0 01 00    mov    0x1c0(%r12),%eax
    0.00 :   ffffffff88cd1b69:       00
    0.00 :   ffffffff88cd1b6a:       8b 96 c0 01 00 00       mov    0x1c0(%rsi),%edx
    0.00 :   ffffffff88cd1b70:       39 d0                   cmp    %edx,%eax
    0.00 :   ffffffff88cd1b72:       7e 10                   jle    0xffffffff88cd1b84
    0.00 :   ffffffff88cd1b74:       83 e8 01                sub    $0x1,%eax
    0.00 :   ffffffff88cd1b77:       48 8b 9b 48 01 00 00    mov    0x148(%rbx),%rbx
    0.00 :   ffffffff88cd1b7e:       39 c2                   cmp    %eax,%edx
    0.00 :   ffffffff88cd1b80:       75 f2                   jne    0xffffffff88cd1b74
    0.00 :   ffffffff88cd1b82:       89 d0                   mov    %edx,%eax
    0.00 :   ffffffff88cd1b84:       39 d0                   cmp    %edx,%eax
    0.00 :   ffffffff88cd1b86:       7d 2c                   jge    0xffffffff88cd1bb4
    0.00 :   ffffffff88cd1b88:       83 ea 01                sub    $0x1,%edx
    0.00 :   ffffffff88cd1b8b:       48 8b ad 48 01 00 00    mov    0x148(%rbp),%rbp
    0.00 :   ffffffff88cd1b92:       39 d0                   cmp    %edx,%eax
    0.00 :   ffffffff88cd1b94:       75 f2                   jne    0xffffffff88cd1b88
    0.00 :   ffffffff88cd1b96:       48 8b bb 50 01 00 00    mov    0x150(%rbx),%rdi
    0.00 :   ffffffff88cd1b9d:       48 39 bd 50 01 00 00    cmp    %rdi,0x150(%rbp)
    0.00 :   ffffffff88cd1ba4:       74 1e                   je     0xffffffff88cd1bc4
    0.00 :   ffffffff88cd1ba6:       48 8b 9b 48 01 00 00    mov    0x148(%rbx),%rbx
    0.00 :   ffffffff88cd1bad:       48 8b ad 48 01 00 00    mov    0x148(%rbp),%rbp
    0.00 :   ffffffff88cd1bb4:       48 8b bb 50 01 00 00    mov    0x150(%rbx),%rdi
    0.00 :   ffffffff88cd1bbb:       48 39 bd 50 01 00 00    cmp    %rdi,0x150(%rbp)
    0.00 :   ffffffff88cd1bc2:       75 e2                   jne    0xffffffff88cd1ba6
    0.00 :   ffffffff88cd1bc4:       48 85 ff                test   %rdi,%rdi
    0.00 :   ffffffff88cd1bc7:       74 dd                   je     0xffffffff88cd1ba6
    0.00 :   ffffffff88cd1bc9:       89 0c 24                mov    %ecx,(%rsp)
    0.00 :   ffffffff88cd1bcc:       e8 4f f9 ff ff          callq  0xffffffff88cd1520
    0.00 :   ffffffff88cd1bd1:       48 85 ed                test   %rbp,%rbp
    0.00 :   ffffffff88cd1bd4:       8b 0c 24                mov    (%rsp),%ecx
    0.00 :   ffffffff88cd1bd7:       0f 84 32 01 00 00       je     0xffffffff88cd1d0f
    0.00 :   ffffffff88cd1bdd:       4c 8b 43 50             mov    0x50(%rbx),%r8
    0.00 :   ffffffff88cd1be1:       4c 2b 45 50             sub    0x50(%rbp),%r8
    0.00 :   ffffffff88cd1be5:       4d 85 c0                test   %r8,%r8
    0.00 :   ffffffff88cd1be8:       0f 8e a0 00 00 00       jle    0xffffffff88cd1c8e
    0.00 :   ffffffff88cd1bee:       48 81 7d 00 00 00 10    cmpq   $0x100000,0x0(%rbp)
    0.00 :   ffffffff88cd1bf5:       00
    0.00 :   ffffffff88cd1bf6:       8b 3d fc 7c 58 01       mov    0x1587cfc(%rip),%edi        # 0xffffffff8a2598f8
    0.00 :   ffffffff88cd1bfc:       0f 85 0f 01 00 00       jne    0xffffffff88cd1d11
    0.00 :   ffffffff88cd1c02:       49 39 f8                cmp    %rdi,%r8
    0.00 :   ffffffff88cd1c05:       0f 8e 83 00 00 00       jle    0xffffffff88cd1c8e
    0.00 :   ffffffff88cd1c0b:       85 c9                   test   %ecx,%ecx
    0.00 :   ffffffff88cd1c0d:       0f 84 ef 00 00 00       je     0xffffffff88cd1d02
    0.00 :   ffffffff88cd1c13:       4c 89 ef                mov    %r13,%rdi
    0.00 :   ffffffff88cd1c16:       e8 95 3e ff ff          callq  0xffffffff88cc5ab0
    0.00 :   ffffffff88cd1c1b:       8b 53 38                mov    0x38(%rbx),%edx
    0.00 :   ffffffff88cd1c1e:       85 d2                   test   %edx,%edx
    0.00 :   ffffffff88cd1c20:       74 6c                   je     0xffffffff88cd1c8e
    0.00 :   ffffffff88cd1c22:       4d 39 a5 78 09 00 00    cmp    %r12,0x978(%r13)
    0.00 :   ffffffff88cd1c29:       74 63                   je     0xffffffff88cd1c8e
    0.00 :   ffffffff88cd1c2b:       66 66 66 66 90          data16 data16 data16 xchg %ax,%ax
    0.00 :   ffffffff88cd1c30:       45 39 f7                cmp    %r14d,%r15d
    0.00 :   ffffffff88cd1c33:       72 59                   jb     0xffffffff88cd1c8e
    0.00 :   ffffffff88cd1c35:       48 83 bb 58 01 00 00    cmpq   $0x0,0x158(%rbx)
    0.00 :   ffffffff88cd1c3c:       00
    0.00 :   ffffffff88cd1c3d:       75 4f                   jne    0xffffffff88cd1c8e
    0.00 :   ffffffff88cd1c3f:       48 89 df                mov    %rbx,%rdi
    0.00 :   ffffffff88cd1c42:       e8 99 b9 ff ff          callq  0xffffffff88ccd5e0
    0.00 :   ffffffff88cd1c47:       83 b8 64 03 00 00 05    cmpl   $0x5,0x364(%rax)
    0.00 :   ffffffff88cd1c4e:       75 14                   jne    0xffffffff88cd1c64
    0.00 :   ffffffff88cd1c50:       eb 3c                   jmp    0xffffffff88cd1c8e
    0.00 :   ffffffff88cd1c52:       48 8b 83 50 01 00 00    mov    0x150(%rbx),%rax
    0.00 :   ffffffff88cd1c59:       48 89 58 50             mov    %rbx,0x50(%rax)
    0.00 :   ffffffff88cd1c5d:       48 8b 9b 48 01 00 00    mov    0x148(%rbx),%rbx
    0.00 :   ffffffff88cd1c64:       48 85 db                test   %rbx,%rbx
    0.00 :   ffffffff88cd1c67:       74 25                   je     0xffffffff88cd1c8e
    0.00 :   ffffffff88cd1c69:       8b 43 38                mov    0x38(%rbx),%eax
    0.00 :   ffffffff88cd1c6c:       85 c0                   test   %eax,%eax
    0.00 :   ffffffff88cd1c6e:       75 e2                   jne    0xffffffff88cd1c52
    0.00 :   ffffffff88cd1c70:       80 3d a0 fe 76 01 00    cmpb   $0x0,0x176fea0(%rip)        # 0xffffffff8a441b17
    0.00 :   ffffffff88cd1c77:       75 15                   jne    0xffffffff88cd1c8e
    0.00 :   ffffffff88cd1c79:       48 c7 c7 47 43 cd 89    mov    $0xffffffff89cd4347,%rdi
    0.00 :   ffffffff88cd1c80:       c6 05 90 fe 76 01 01    movb   $0x1,0x176fe90(%rip)        # 0xffffffff8a441b17
    0.00 :   ffffffff88cd1c87:       e8 fe 89 7e 00          callq  0xffffffff894ba68a
    0.00 :   ffffffff88cd1c8c:       0f 0b                   ud2
    0.00 :   ffffffff88cd1c8e:       48 83 c4 10             add    $0x10,%rsp
    0.00 :   ffffffff88cd1c92:       5b                      pop    %rbx
    0.00 :   ffffffff88cd1c93:       5d                      pop    %rbp
    0.00 :   ffffffff88cd1c94:       41 5c                   pop    %r12
    0.00 :   ffffffff88cd1c96:       41 5d                   pop    %r13
    0.00 :   ffffffff88cd1c98:       41 5e                   pop    %r14
    0.00 :   ffffffff88cd1c9a:       41 5f                   pop    %r15
    0.00 :   ffffffff88cd1c9c:       c3                      retq
    0.00 :   ffffffff88cd1c9d:       cc                      int3
    0.00 :   ffffffff88cd1c9e:       cc                      int3
    0.00 :   ffffffff88cd1c9f:       cc                      int3
    0.00 :   ffffffff88cd1ca0:       cc                      int3
    0.00 :   ffffffff88cd1ca1:       48 8b 86 d0 01 00 00    mov    0x1d0(%rsi),%rax
    0.00 :   ffffffff88cd1ca8:       8b 88 84 01 00 00       mov    0x184(%rax),%ecx
    0.00 :   ffffffff88cd1cae:       85 c9                   test   %ecx,%ecx
    0.00 :   ffffffff88cd1cb0:       0f 84 64 fe ff ff       je     0xffffffff88cd1b1a
    0.00 :   ffffffff88cd1cb6:       48 83 c4 10             add    $0x10,%rsp
    0.00 :   ffffffff88cd1cba:       5b                      pop    %rbx
    0.00 :   ffffffff88cd1cbb:       5d                      pop    %rbp
    0.00 :   ffffffff88cd1cbc:       41 5c                   pop    %r12
    0.00 :   ffffffff88cd1cbe:       41 5d                   pop    %r13
    0.00 :   ffffffff88cd1cc0:       41 5e                   pop    %r14
    0.00 :   ffffffff88cd1cc2:       41 5f                   pop    %r15
    0.00 :   ffffffff88cd1cc4:       c3                      retq
    0.00 :   ffffffff88cd1cc5:       cc                      int3
    0.00 :   ffffffff88cd1cc6:       cc                      int3
    0.00 :   ffffffff88cd1cc7:       cc                      int3
    0.00 :   ffffffff88cd1cc8:       cc                      int3
    0.00 :   ffffffff88cd1cc9:       31 c9                   xor    %ecx,%ecx
    0.00 :   ffffffff88cd1ccb:       45 39 f7                cmp    %r14d,%r15d
    0.00 :   ffffffff88cd1cce:       0f 82 60 fe ff ff       jb     0xffffffff88cd1b34
    0.00 :   ffffffff88cd1cd4:       83 e2 02                and    $0x2,%edx
    0.00 :   ffffffff88cd1cd7:       0f 85 57 fe ff ff       jne    0xffffffff88cd1b34
    0.00 :   ffffffff88cd1cdd:       48 89 ef                mov    %rbp,%rdi
    0.00 :   ffffffff88cd1ce0:       48 89 34 24             mov    %rsi,(%rsp)
    0.00 :   ffffffff88cd1ce4:       e8 67 d5 ff ff          callq  0xffffffff88ccf250
    0.00 :   ffffffff88cd1ce9:       b9 01 00 00 00          mov    $0x1,%ecx
    0.00 :   ffffffff88cd1cee:       48 8b 34 24             mov    (%rsp),%rsi
    0.00 :   ffffffff88cd1cf2:       e9 3d fe ff ff          jmpq   0xffffffff88cd1b34
    0.00 :   ffffffff88cd1cf7:       83 f8 05                cmp    $0x5,%eax
    0.00 :   ffffffff88cd1cfa:       0f 85 13 ff ff ff       jne    0xffffffff88cd1c13
    0.00 :   ffffffff88cd1d00:       eb 8c                   jmp    0xffffffff88cd1c8e
    0.00 :   ffffffff88cd1d02:       48 89 ef                mov    %rbp,%rdi
    0.00 :   ffffffff88cd1d05:       e8 46 d5 ff ff          callq  0xffffffff88ccf250
    0.00 :   ffffffff88cd1d0a:       e9 04 ff ff ff          jmpq   0xffffffff88cd1c13
    0.00 :   ffffffff88cd1d0f:       0f 0b                   ud2
    0.00 :   ffffffff88cd1d11:       48 89 ea                mov    %rbp,%rdx
    0.00 :   ffffffff88cd1d14:       be 00 00 10 00          mov    $0x100000,%esi
    0.00 :   ffffffff88cd1d19:       4c 89 44 24 08          mov    %r8,0x8(%rsp)
    0.00 :   ffffffff88cd1d1e:       89 0c 24                mov    %ecx,(%rsp)
    0.00 :   ffffffff88cd1d21:       e8 7a b6 ff ff          callq  0xffffffff88ccd3a0
    0.00 :   ffffffff88cd1d26:       4c 8b 44 24 08          mov    0x8(%rsp),%r8
    0.00 :   ffffffff88cd1d2b:       8b 0c 24                mov    (%rsp),%ecx
    0.00 :   ffffffff88cd1d2e:       48 89 c7                mov    %rax,%rdi
    0.00 :   ffffffff88cd1d31:       e9 cc fe ff ff          jmpq   0xffffffff88cd1c02
    0.00 :   ffffffff88cd1d36:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   ffffffff88cd1d3d:       00 00 00
 Percent |	Source code & Disassembly of kcore for mem_load_uops_misc_retired.llc_miss:pp (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :                      Disassembly of section load0:
         :
         :                      ffffffff890fa9a0 <load0>:
    0.00 :   ffffffff890fa9a0:       66 66 90                data16 xchg %ax,%ax
    0.00 :   ffffffff890fa9a3:       83 fa 08                cmp    $0x8,%edx
    0.00 :   ffffffff890fa9a6:       72 27                   jb     0xffffffff890fa9cf
    0.00 :   ffffffff890fa9a8:       89 f9                   mov    %edi,%ecx
    0.00 :   ffffffff890fa9aa:       83 e1 07                and    $0x7,%ecx
    0.00 :   ffffffff890fa9ad:       74 15                   je     0xffffffff890fa9c4
    0.00 :   ffffffff890fa9af:       83 e9 08                sub    $0x8,%ecx
    0.00 :   ffffffff890fa9b2:       f7 d9                   neg    %ecx
    0.00 :   ffffffff890fa9b4:       29 ca                   sub    %ecx,%edx
    0.00 :   ffffffff890fa9b6:       8a 06                   mov    (%rsi),%al
    0.00 :   ffffffff890fa9b8:       88 07                   mov    %al,(%rdi)
    0.00 :   ffffffff890fa9ba:       48 ff c6                inc    %rsi
    0.00 :   ffffffff890fa9bd:       48 ff c7                inc    %rdi
    0.00 :   ffffffff890fa9c0:       ff c9                   dec    %ecx
    0.00 :   ffffffff890fa9c2:       75 f2                   jne    0xffffffff890fa9b6
    0.00 :   ffffffff890fa9c4:       89 d1                   mov    %edx,%ecx
    0.00 :   ffffffff890fa9c6:       c1 e9 03                shr    $0x3,%ecx
    0.00 :   ffffffff890fa9c9:       83 e2 07                and    $0x7,%edx
  100.00 :   ffffffff890fa9cc:       f3 48 a5                rep movsq %ds:(%rsi),%es:(%rdi)
    0.00 :   ffffffff890fa9cf:       89 d1                   mov    %edx,%ecx
    0.00 :   ffffffff890fa9d1:       f3 a4                   rep movsb %ds:(%rsi),%es:(%rdi)
    0.00 :   ffffffff890fa9d3:       31 c0                   xor    %eax,%eax
    0.00 :   ffffffff890fa9d5:       66 66 90                data16 xchg %ax,%ax
    0.00 :   ffffffff890fa9d8:       c3                      retq
    0.00 :   ffffffff890fa9d9:       cc                      int3
    0.00 :   ffffffff890fa9da:       cc                      int3
    0.00 :   ffffffff890fa9db:       cc                      int3
    0.00 :   ffffffff890fa9dc:       cc                      int3
 Percent |	Source code & Disassembly of kcore for mem_load_uops_misc_retired.llc_miss:pp (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :                      Disassembly of section load0:
         :
         :                      ffffffff88cedb30 <load0>:
    0.00 :   ffffffff88cedb30:       66 66 66 66 90          data16 data16 data16 xchg %ax,%ax
    0.00 :   ffffffff88cedb35:       65 8b 05 24 ba 32 77    mov    %gs:0x7732ba24(%rip),%eax        # 0x19560
  100.00 :   ffffffff88cedb3c:       48 8b 17                mov    (%rdi),%rdx
    0.00 :   ffffffff88cedb3f:       89 c0                   mov    %eax,%eax
    0.00 :   ffffffff88cedb41:       48 0f a3 02             bt     %rax,(%rdx)
    0.00 :   ffffffff88cedb45:       0f 92 c0                setb   %al
    0.00 :   ffffffff88cedb48:       72 23                   jb     0xffffffff88cedb6d
    0.00 :   ffffffff88cedb4a:       0f b6 87 00 02 00 00    movzbl 0x200(%rdi),%eax
    0.00 :   ffffffff88cedb51:       84 c0                   test   %al,%al
    0.00 :   ffffffff88cedb53:       74 18                   je     0xffffffff88cedb6d
    0.00 :   ffffffff88cedb55:       48 c7 c0 00 08 02 00    mov    $0x20800,%rax
    0.00 :   ffffffff88cedb5c:       65 48 03 05 04 ba 32    add    %gs:0x7732ba04(%rip),%rax        # 0x19568
    0.00 :   ffffffff88cedb63:       77
    0.00 :   ffffffff88cedb64:       48 8b 00                mov    (%rax),%rax
    0.00 :   ffffffff88cedb67:       48 85 c0                test   %rax,%rax
    0.00 :   ffffffff88cedb6a:       0f 95 c0                setne  %al
    0.00 :   ffffffff88cedb6d:       c3                      retq
    0.00 :   ffffffff88cedb6e:       cc                      int3
    0.00 :   ffffffff88cedb6f:       cc                      int3
    0.00 :   ffffffff88cedb70:       cc                      int3
    0.00 :   ffffffff88cedb71:       cc                      int3
    0.00 :   ffffffff88cedb72:       cc                      int3
    0.00 :   ffffffff88cedb73:       cc                      int3
    0.00 :   ffffffff88cedb74:       cc                      int3
    0.00 :   ffffffff88cedb75:       cc                      int3
    0.00 :   ffffffff88cedb76:       cc                      int3
    0.00 :   ffffffff88cedb77:       cc                      int3
    0.00 :   ffffffff88cedb78:       cc                      int3
    0.00 :   ffffffff88cedb79:       cc                      int3
    0.00 :   ffffffff88cedb7a:       cc                      int3
    0.00 :   ffffffff88cedb7b:       cc                      int3
    0.00 :   ffffffff88cedb7c:       cc                      int3
    0.00 :   ffffffff88cedb7d:       cc                      int3
    0.00 :   ffffffff88cedb7e:       cc                      int3
    0.00 :   ffffffff88cedb7f:       cc                      int3
 Percent |	Source code & Disassembly of kcore for mem_load_uops_misc_retired.llc_miss:pp (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :                      Disassembly of section load0:
         :
         :                      ffffffff896010a7 <load0>:
  100.00 :   ffffffff896010a7:       48 cf                   iretq
 Percent |	Source code & Disassembly of cc for mem_load_uops_misc_retired.llc_miss:pp (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000003ff0 <Compress(CSRGraph<int, int, true> const&, pvector<int>&) [clone ._omp_fn.0]>:
         :          Compress(CSRGraph<int, int, true> const&, pvector<int>&) [clone ._omp_fn.0]:
         :          }
         :
         :
         :          // Reduce depth of tree for each component to 1 by crawling up parents
         :          void Compress(const Graph &g, pvector<NodeID>& comp) {
         :          #pragma omp parallel for schedule(dynamic, 16384)
    0.00 :   3ff0:   41 54                   push   %r12
    0.00 :   3ff2:   b9 00 40 00 00          mov    $0x4000,%ecx
    0.00 :   3ff7:   ba 01 00 00 00          mov    $0x1,%edx
    0.00 :   3ffc:   55                      push   %rbp
    0.00 :   3ffd:   53                      push   %rbx
    0.00 :   3ffe:   48 89 fb                mov    %rdi,%rbx
    0.00 :   4001:   48 83 ec 10             sub    $0x10,%rsp
         :          CSRGraph<int, int, true>::num_nodes() const:
         :          bool directed() const {
         :          return directed_;
         :          }
         :
         :          int64_t num_nodes() const {
         :          return num_nodes_;
    0.00 :   4005:   48 8b 07                mov    (%rdi),%rax
    0.00 :   4008:   31 ff                   xor    %edi,%edi
    0.00 :   400a:   4c 8d 64 24 08          lea    0x8(%rsp),%r12
    0.00 :   400f:   48 89 e5                mov    %rsp,%rbp
    0.00 :   4012:   48 63 70 08             movslq 0x8(%rax),%rsi
    0.00 :   4016:   4d 89 e1                mov    %r12,%r9
    0.00 :   4019:   49 89 e8                mov    %rbp,%r8
    0.00 :   401c:   e8 ff f3 ff ff          callq  3420 <GOMP_loop_nonmonotonic_dynamic_start@plt>
    0.00 :   4021:   84 c0                   test   %al,%al
    0.00 :   4023:   75 22                   jne    4047 <Compress(CSRGraph<int, int, true> const&, pvector<int>&) [clone ._omp_fn.0]+0x57>
    0.00 :   4025:   e8 16 f1 ff ff          callq  3140 <GOMP_loop_end_nowait@plt>
         :          Compress(CSRGraph<int, int, true> const&, pvector<int>&) [clone ._omp_fn.0]:
    0.00 :   402a:   48 83 c4 10             add    $0x10,%rsp
    0.00 :   402e:   5b                      pop    %rbx
    0.00 :   402f:   5d                      pop    %rbp
    0.00 :   4030:   41 5c                   pop    %r12
    0.00 :   4032:   c3                      retq
    0.00 :   4033:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)
    0.00 :   4038:   4c 89 e6                mov    %r12,%rsi
    0.00 :   403b:   48 89 ef                mov    %rbp,%rdi
    0.00 :   403e:   e8 8d f2 ff ff          callq  32d0 <GOMP_loop_nonmonotonic_dynamic_next@plt>
    0.00 :   4043:   84 c0                   test   %al,%al
    0.00 :   4045:   74 de                   je     4025 <Compress(CSRGraph<int, int, true> const&, pvector<int>&) [clone ._omp_fn.0]+0x35>
         :          pvector<int>::operator[](unsigned long):
         :          reserve(num_elements);
         :          end_size_ = start_ + num_elements;
         :          }
         :
         :          T_& operator[](size_t n) {
         :          return start_[n];
    0.00 :   4047:   48 8b 53 08             mov    0x8(%rbx),%rdx
    0.00 :   404b:   48 8b 04 24             mov    (%rsp),%rax
    0.00 :   404f:   8b 7c 24 08             mov    0x8(%rsp),%edi
    0.00 :   4053:   48 8b 0a                mov    (%rdx),%rcx
    0.00 :   4056:   89 c6                   mov    %eax,%esi
         :          Compress(CSRGraph<int, int, true> const&, pvector<int>&) [clone ._omp_fn.0]:
         :          for (NodeID n = 0; n < g.num_nodes(); n++) {
         :          while (comp[n] != comp[comp[n]]) {
    0.00 :   4058:   48 98                   cltq
    0.00 :   405a:   8b 14 81                mov    (%rcx,%rax,4),%edx
    0.00 :   405d:   0f 1f 00                nopl   (%rax)
    0.00 :   4060:   48 63 c2                movslq %edx,%rax
  100.00 :   4063:   8b 04 81                mov    (%rcx,%rax,4),%eax
    0.00 :   4066:   39 d0                   cmp    %edx,%eax
    0.00 :   4068:   74 12                   je     407c <Compress(CSRGraph<int, int, true> const&, pvector<int>&) [clone ._omp_fn.0]+0x8c>
    0.00 :   406a:   48 63 d6                movslq %esi,%rdx
         :          comp[n] = comp[comp[n]];
    0.00 :   406d:   89 04 91                mov    %eax,(%rcx,%rdx,4)
         :          while (comp[n] != comp[comp[n]]) {
    0.00 :   4070:   89 c2                   mov    %eax,%edx
    0.00 :   4072:   48 63 c2                movslq %edx,%rax
    0.00 :   4075:   8b 04 81                mov    (%rcx,%rax,4),%eax
    0.00 :   4078:   39 d0                   cmp    %edx,%eax
    0.00 :   407a:   75 ee                   jne    406a <Compress(CSRGraph<int, int, true> const&, pvector<int>&) [clone ._omp_fn.0]+0x7a>
    0.00 :   407c:   83 c6 01                add    $0x1,%esi
    0.00 :   407f:   39 f7                   cmp    %esi,%edi
    0.00 :   4081:   7e b5                   jle    4038 <Compress(CSRGraph<int, int, true> const&, pvector<int>&) [clone ._omp_fn.0]+0x48>
    0.00 :   4083:   48 63 c6                movslq %esi,%rax
    0.00 :   4086:   8b 14 81                mov    (%rcx,%rax,4),%edx
    0.00 :   4089:   eb d5                   jmp    4060 <Compress(CSRGraph<int, int, true> const&, pvector<int>&) [clone ._omp_fn.0]+0x70>
